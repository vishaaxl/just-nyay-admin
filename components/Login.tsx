import Input from "components/Input";
import { Form, Formik } from "formik";
import Head from "next/head";
import Image from "next/image";
import * as Yup from "yup";
import styled from "styled-components";
import { useRouter } from "next/router";

import { useState } from "react";
import { useAuth } from "context/User";

import { auth } from "firebase.config";
import {
  User as FirebaseUser,
  signInWithEmailAndPassword,
  signOut,
} from "firebase/auth";

const Container = styled.section`
  @media (min-width: 767px) {
    display: grid;
    grid-template-columns: 1fr 1fr;
    height: 100vh;
    align-items: center;

    .main-image {
      transform: scale(1.5);
    }
  }

  .error {
    color: ${({ theme }) => theme.red};
    margin-bottom: 1rem;
  }

  .image-wrapper {
    display: flex;
    width: 100%;
    justify-content: center;
    align-items: center;
    height: 50vh;
  }

  .login-container {
    width: 80%;
    margin: 0 auto;
    h1 {
      margin-bottom: 1.5rem;
      font-size: 2rem;
      font-weight: 500;

      span {
        color: ${({ theme }) => theme.primaryAccent};
      }
    }

    .forgot {
      color: ${({ theme }) => theme.primaryAccent};
      display: block;
      margin-bottom: 1rem;
      cursor: pointer;

      &:hover {
        text-decoration: underline;
      }
    }

    .submit {
      cursor: pointer;
      width: 50%;
      padding: 0.75rem 0;
      background-color: ${({ theme }) => theme.primaryAccent};
      border: none;
      border-radius: 5px;
      color: ${({ theme }) => theme.primary};

      &:disabled {
        opacity: 0.5;
      }
    }
  }
`;

export default function Login() {
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const signin = (
    username: string,
    password: string,
    resetForm: () => void
  ) => {
    setLoading(true);
    signInWithEmailAndPassword(auth, username, password)
      .then(({ user }) => {
        if (user.uid != process.env.NEXT_PUBLIC_UID) {
          signOut(auth).then(() => {
            setError("**Invalid User");
          });

          resetForm();
          setLoading(true);
          return;
        }

        setError("");
        setLoading(true);

        router.push("/");
        resetForm();
      })
      .catch((err) => {
        setError(err.message);
        resetForm();
        setLoading(false);
      });
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <div className="image-wrapper">
          <Image
            src="/images/signup.png"
            height={220}
            width={270}
            alt=""
            className="main-image"
          />
        </div>
        <div className="login-container">
          <h1>
            Log in to <span>dashboard</span>
          </h1>
          {error && <div className="error">{error}</div>}
          <Formik
            initialValues={{
              username: "",
              password: "",
            }}
            validationSchema={Yup.object().shape({
              username: Yup.string().required("Required"),
              password: Yup.string().required("Required"),
            })}
            onSubmit={(values, { resetForm }) => {
              signin(values.username, values.password, resetForm);
            }}
          >
            <Form>
              <Input name="username" placeholder="Username" />
              <Input name="password" placeholder="Password" type="password" />
              <span className="forgot">Forgot Password?</span>
              <button className="submit" disabled={loading}>
                Log in
              </button>
            </Form>
          </Formik>
        </div>
      </Container>
    </>
  );
}
