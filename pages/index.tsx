import SalesCard from "components/Card";
import OrdersTable from "components/Tables/OrdersTable";
import { db } from "firebase.config";
import {
  collection,
  DocumentData,
  getDocs,
  orderBy,
  query,
} from "firebase/firestore";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  AiOutlineBarChart,
  AiOutlineLineChart,
  AiOutlineUserAdd,
} from "react-icons/ai";
import styled from "styled-components";
import { generateUid } from "utils/main";

interface Props {
  users: string;
  lawyers: string;
  interns: string;
  orders: string;
}

const CardsWrapper = styled.div`
  display: grid;
  gap: 1rem;

  @media (min-width: 425px) {
    grid-template-columns: repeat(2, 1fr);
  }
`;

const orderColumn = [
  {
    Header: "Order ID",
    accessor: "uid" as const, // accessor is the "key" in the data
  },
  {
    Header: "Plan",
    accessor: "plan" as const, // accessor is the "key" in the data
  },
  {
    Header: "Language",
    accessor: "language" as const,
  },
  {
    Header: "Type",
    accessor: "problemType" as const,
  },
  {
    Header: "Status",
    accessor: "status" as const,
  },
];

export default function Home({ users, lawyers, interns, orders }: Props) {
  const cardsData = [
    {
      id: 1,
      title: "Total Orders",
      figure: `${JSON.parse(orders).length} orders`,
      increase: JSON.parse(orders).length * 10,
      background: "#98BDFF",
      icon: <AiOutlineBarChart style={{ fontSize: "2.5rem" }} />,
      link: "/orders",
    },
    {
      id: 2,
      title: "Total Lawyers",
      figure: `${JSON.parse(lawyers).length} users`,
      increase: JSON.parse(orders).length * 10,
      background: "#F3797E",
      icon: <AiOutlineLineChart style={{ fontSize: "2.5rem" }} />,
      link: "/lawyers",
    },
    {
      id: 3,
      title: "Total Users",
      figure: `${JSON.parse(users).length} users`,
      increase: JSON.parse(orders).length * 10,
      background: "#7978E9",
      icon: <AiOutlineUserAdd style={{ fontSize: "2.5rem" }} />,
      link: "/customers",
    },
    {
      id: 4,
      title: "Total Inters",
      figure: `${JSON.parse(interns).length} interns`,
      increase: JSON.parse(orders).length * 10,
      background: "#7DA0FA",
      icon: <AiOutlineUserAdd style={{ fontSize: "2.5rem" }} />,
      link: "/interns",
    },
  ];

  const router = useRouter();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CardsWrapper>
        {cardsData.map((card) => (
          <SalesCard
            onClick={() => router.push(card.link)}
            key={card.id}
            title={card.title}
            icon={card.icon}
            background={card.background}
            figure={card.figure}
            increase={card.increase}
          />
        ))}
      </CardsWrapper>

      <OrdersTable
        tableData={JSON.parse(orders).map((order: any) => ({
          ...order,
          uid: generateUid(order.createdAt.seconds * 1000, order.id),
        }))}
        tableColumns={orderColumn}
        tableName="Recent Orders"
        path="orders"
      />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const userRef = query(collection(db, "users"), orderBy("createdAt", "desc"));
  const lawyersRef = query(
    collection(db, "lawyers"),
    orderBy("createdAt", "desc")
  );
  const internsRef = query(
    collection(db, "interns"),
    orderBy("createdAt", "desc")
  );
  const ordersRef = query(
    collection(db, "orders"),
    orderBy("createdAt", "desc")
  );

  const userSnap = await getDocs(userRef);
  const lawyersSnap = await getDocs(lawyersRef);
  const internsSnap = await getDocs(internsRef);
  const ordersSnap = await getDocs(ordersRef);

  const users: DocumentData[] = [],
    lawyers: DocumentData[] = [],
    interns: DocumentData[] = [],
    orders: DocumentData[] = [];

  userSnap.forEach((doc) => {
    users.push({
      id: doc.id,
      ...doc.data(),
    });
  });

  lawyersSnap.forEach((doc) => {
    lawyers.push({
      id: doc.id,
      ...doc.data(),
    });
  });

  internsSnap.forEach((doc) => {
    interns.push({
      id: doc.id,
      ...doc.data(),
    });
  });

  ordersSnap.forEach((doc) => {
    orders.push({
      id: doc.id,
      ...doc.data(),
    });
  });

  return {
    props: {
      users: JSON.stringify(users),
      lawyers: JSON.stringify(lawyers),
      interns: JSON.stringify(interns),
      orders: JSON.stringify(orders),
    },
  };
};
